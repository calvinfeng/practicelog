{"version":3,"sources":["shared/type_definitions.ts","reportWebVitals.ts","components/LogTable.tsx","components/log_entry_management/DateSelector.tsx","shared/callbacks.ts","components/log_entry_management/LabelSelector.tsx","components/log_entry_management/DurationSelector.tsx","components/log_entry_management/MessageEditor.tsx","components/log_entry_management/AssignmentEditor.tsx","components/log_entry_management/Submission.tsx","components/log_entry_management/LogEntryManagement.tsx","components/log_label_management/DeleteConfirmation.tsx","components/log_label_management/LogLabelManagement.tsx","components/AssignmentChecklistPopover.tsx","components/DurationViewer.tsx","containers/PracticeLog.tsx","containers/Unauthorized.tsx","containers/App.tsx","index.tsx"],"names":["DeleteConfirmationTarget","Mode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","LogTable","props","tableRows","cellStyle","longCellStyle","makeHandlerSelectLogEntry","log","handleSelectLogEntry","scrollToBottom","makeHandlerDeleteLogEntry","handleHTTPDeleteLogEntry","makeHandlerSetLogCopy","copy","Object","assign","id","date","Date","assignments","forEach","assignment","completed","makeHandlerSetLogViewAndAssignment","event","handleFocusLogEntryAndAnchorEl","logEntries","assignmentIconButton","list","chipStyle","labels","map","label","Chip","style","name","icon","color","undefined","length","IconButton","component","onClick","disabled","filter","push","TableRow","TableCell","formatDate","duration","message","TableContainer","className","Paper","Table","TableHead","TableBody","d","dt","DateTime","fromISO","toISOString","setZone","toLocaleString","DATE_MED_WITH_WEEKDAY","toString","nilUUID","DateSelector","utils","DateFnsUtils","value","inputDate","disableToolbar","variant","format","margin","animateYearScrolling","onChange","setInputDate","alphabetOrder","a","b","LabelSelector","React","useState","selectedLabelID","setSelectLabelID","logLabels","Typography","isLabelSelectedAlready","labelID","found","inputLabelList","find","Boolean","findLabelFromProps","chips","Grid","item","onDelete","removeFromInputLabelList","direction","justify","alignItems","container","spacing","FormControl","width","InputLabel","Select","labelId","ev","target","sort","MenuItem","Button","marginLeft","newInputLabelList","labelToAdd","parent_id","parentToAdd","setInputLabelList","startIcon","DurationSelector","gutterBottom","inputDuration","Slider","defaultValue","_","setInputDuration","aria-labelledby","valueLabelDisplay","step","marks","min","max","MessageEditor","TextField","inputMessage","setInputMessage","fullWidth","InputLabelProps","shrink","AssignmentEditor","textFieldAssignmentName","setTextFieldAssignmentName","selectedAssignment","setSelectedAssignment","makeHandlerDeleteAssignment","newAssignmentList","inputAssignmentList","splice","position","i","setInputAssignmentList","makeHandlerEditAssignment","assignmentListItems","ListItem","ListItemText","primary","ListItemSecondaryAction","edge","aria-label","buttons","form","type","newPosition","List","dense","onSubmit","preventDefault","marginTop","Submission","buttonStyle","buttonGridItems","mode","EditEntry","entry","inputID","user_id","details","console","handleHTTPUpdateLogEntry","handleDeselectLogEntry","NewEntry","handleHTTPCreateLogEntry","defaultState","LogEntryManagement","handleSetInputDate","setState","handleSetInputDuration","handleSetInputLabelList","handleSetInputAssignmentList","handleSetInputMessage","handleRemoveFromInputLabelList","state","selectedLogEntry","nextProps","this","header","Component","DeleteConfirmation","selectedChildLabel","Child","Dialog","open","onClose","handleClose","DialogTitle","DialogContent","DialogContentText","DialogActions","autoFocus","selectedParentLabel","Parent","inputParentLabelName","inputChildLabelName","showDeleteDialog","deleteTarget","None","LabelManagement","newHandlerSelectParentLabel","newHandlerSelectChildLabel","handleCreateParentLabel","newLabel","children","handleHTTPCreateLogLabel","handleUpdateParentLabel","payload","handleHTTPUpdateLogLabel","handleDeleteParentLabel","handleHTTPDeleteLogLabel","handleClickCreateChildLabel","handleUpdateChildLabel","handleDeleteChildLabel","handleParentLabelNameChange","handleChildLabelNameChange","handleCloseDeleteDialog","panelParentLabels","Divider","orientation","flexItem","panelChildLabels","panelEditLabel","items","handler","gridItems","selectedChildLabelButtonGroup","selectedParentLabelButtonGroup","selectedNoneLabelButtonGroup","AssignmentChecklistPopover","focusedLogEntry","content","align","Checkbox","entryToUpdate","checked","handleHTTPUpdateLogAssignments","inputProps","Popover","popoverAnchor","anchorEl","handleClearPopoverAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","DurationViewer","expanded","setExpanded","selectLabelID","transformToCheckBox","FormControlLabel","stopPropagation","control","logLabelDurations","get","fetchLogLabelDuration","parentCheckBoxes","childCheckBoxes","mins","Math","floor","Accordion","AccordionSummary","expandIcon","FormGroup","row","AccordionDetails","PracticeLog","http","pageAnchor","resp","data","set","catch","reason","alertShown","alertMessage","alertSeverity","post","status","fetchLogLabels","put","fetchLogEntriesByPage","pageNum","delete","updatedEntry","entries","scrollIntoView","behavior","currentTarget","handleCloseAlert","Map","hasNextPage","axios","create","baseURL","process","timeout","headers","IDToken","prevState","results","childrenIDByParentID","page","params","more","PaginationControlPanel","ref","Snackbar","autoHideDuration","severity","Alert","elevation","Unauthorized","userProfile","full_name","App","setUserProfile","google_email","token_id","clientId","buttonText","onSuccess","code","tokenId","access_token","accessToken","granted_scopes","getGrantedScopes","google_user_id","getBasicProfile","getId","getEmail","getName","given_name","getGivenName","family_name","getFamilyName","image_url","getImageUrl","onFailure","error","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8bd61f4e.chunk.js","sourcesContent":["export type LogLabelJSON = {\n  id: string\n  parent_id: string | null\n  children: string[]\n  name: string\n}\n\nexport type LogLabelDurationJSON = {\n  id: string\n  parent_id: string | null\n  name: string\n  duration: number\n}\n\nexport type LogEntryJSON = {\n  id: string\n  date: Date\n  user_id: string\n  message: string\n  details: string\n  duration: number\n  labels: LogLabelJSON[]\n  assignments: LogAssignmentJSON[]\n}\n\nexport type LogAssignmentJSON = {\n  position: number\n  name: string\n  completed: boolean\n}\n\nexport type GoogleUserProfile = {\n  token_id: string\n  access_token: string\n  granted_scopes: string\n  google_user_id: string\n  google_email: string\n  full_name: string\n  given_name: string\n  family_name: string\n  image_url: string\n}\n\nexport type GoogleError = {\n  error: string\n  details: string\n}\n\nexport enum DeleteConfirmationTarget {\n  None = \"NONE\",\n  Child = \"CHILD\",\n  Parent = \"PARENT\"\n}\n\nexport enum Mode {\n  EditEntry = \"EDIT_ENTRY\",\n  NewEntry = \"NEW_ENTRY\"\n}\n\nexport const nilUUID = '00000000-0000-0000-0000-000000000000'\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\n\nimport { LogLabelJSON, LogEntryJSON, LogAssignmentJSON } from '../shared/type_definitions'\nimport './LogTable.scss'\nimport { DateTime }from 'luxon'\n\nimport {\n  Chip,\n  TableRow,\n  TableCell,\n  IconButton,\n  TableContainer,\n  Paper,\n  Table,\n  TableHead,\n  TableBody,\n} from '@material-ui/core'\nimport MusicNote from '@material-ui/icons/MusicNote'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport EditIcon from '@material-ui/icons/Edit'\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport AssignmentTurnedInSharpIcon from '@material-ui/icons/AssignmentTurnedInSharp';\nimport AssignmentOutlinedIcon from '@material-ui/icons/AssignmentOutlined';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\n\ntype Props = {\n  logEntries: LogEntryJSON[]\n  scrollToBottom: () => void\n  handleHTTPDeleteLogEntry: (log: LogEntryJSON) => void\n  handleSelectLogEntry: (log: LogEntryJSON) => void\n  handleFocusLogEntryAndAnchorEl: (event: React.MouseEvent<HTMLButtonElement>, log: LogEntryJSON) => void\n}\n\nfunction hasAllAssignmentCompleted(list: LogAssignmentJSON[]): boolean {\n  return list.filter((assignment: LogAssignmentJSON) => {\n    return assignment.completed\n  }).length === list.length\n}\n\nexport default function LogTable(props: Props) {\n  const tableRows: JSX.Element[] = []\n  const cellStyle = { \"padding\": \"5px\" }\n  const longCellStyle = { \"padding\": \"5px\", \"width\": \"35%\" }\n\n  const makeHandlerSelectLogEntry = (log: LogEntryJSON) => () => {\n    props.handleSelectLogEntry(log)\n    props.scrollToBottom()\n  }\n\n  const makeHandlerDeleteLogEntry = (log: LogEntryJSON) => () => {\n    props.handleHTTPDeleteLogEntry(log)\n  }\n\n  const makeHandlerSetLogCopy = (log: LogEntryJSON) => () => {\n    const copy: LogEntryJSON = Object.assign({}, log, {id: \"\"})\n    copy.date = new Date()\n    if (copy.assignments) {\n      // Default assignment to be incompleted\n      copy.assignments.forEach((assignment) => {\n        assignment.completed = false\n      })\n    }\n    props.handleSelectLogEntry(copy)\n    props.scrollToBottom()\n  }\n\n  const makeHandlerSetLogViewAndAssignment = (log: LogEntryJSON) => (event: React.MouseEvent<HTMLButtonElement>) => {\n    props.handleFocusLogEntryAndAnchorEl(event, log)\n  }\n\n  props.logEntries.forEach((log: LogEntryJSON) => {\n    const chipStyle = { \"margin\": \"0.1rem\" }\n\n    let labels: JSX.Element[] = []\n    if (log.labels) {\n      labels = log.labels.map((label: LogLabelJSON) => (\n        <Chip style={chipStyle} label={label.name} icon={<MusicNote />} color=\"primary\" />\n      ))\n    }\n\n    /**\n     * When assignments are null, the icon is disabled\n     */\n    let assignmentIconButton: JSX.Element\n    if (log.assignments === null || log.assignments === undefined || log.assignments.length === 0) {\n      assignmentIconButton = (\n        <IconButton color=\"primary\" component=\"span\" onClick={makeHandlerSetLogViewAndAssignment(log)}\n          disabled={true}>\n          <AssignmentOutlinedIcon />\n        </IconButton>\n      )\n    } else if (hasAllAssignmentCompleted(log.assignments)) {\n      assignmentIconButton = (\n        <IconButton color=\"primary\" component=\"span\" onClick={makeHandlerSetLogViewAndAssignment(log)}>\n          <AssignmentTurnedInSharpIcon />\n        </IconButton>\n      )\n    } else {\n      assignmentIconButton = (\n        <IconButton color=\"primary\" component=\"span\" onClick={makeHandlerSetLogViewAndAssignment(log)}>\n          <AssignmentIcon />\n        </IconButton>\n      )\n    }\n\n    tableRows.push(\n      <TableRow>\n        <TableCell style={cellStyle}>{formatDate(log.date)}</TableCell>\n        <TableCell style={cellStyle}>{log.duration} mins</TableCell>\n        <TableCell style={longCellStyle}>{labels}</TableCell>\n        <TableCell style={longCellStyle}>{log.message}</TableCell>\n        <TableCell style={cellStyle}>\n        {assignmentIconButton}\n        <IconButton color=\"primary\" component=\"span\" onClick={makeHandlerSelectLogEntry(log)}>\n          <EditIcon />\n        </IconButton>\n        <IconButton color=\"primary\" component=\"span\" onClick={makeHandlerSetLogCopy(log)}>\n          <FileCopyIcon />\n        </IconButton>\n        <IconButton color=\"secondary\" component=\"span\" onClick={makeHandlerDeleteLogEntry(log)}>\n          <DeleteIcon />\n        </IconButton>\n        </TableCell>\n      </TableRow>\n    )\n  })\n\n  return (\n    <TableContainer className=\"LogTable\" component={Paper}>\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell style={cellStyle}>Date</TableCell>\n            <TableCell style={cellStyle}>Duration</TableCell>\n            <TableCell style={cellStyle}>Labels</TableCell>\n            <TableCell style={cellStyle}>Message</TableCell>\n            <TableCell style={cellStyle}>Action</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {tableRows}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n}\n\nfunction formatDate(d: Date): string {\n  const dt = DateTime.fromISO(d.toISOString())\n  dt.setZone(\"America/Los_Angeles\")\n  return dt.toLocaleString(DateTime.DATE_MED_WITH_WEEKDAY).toString()\n  // const parts = [`${dt.year}`]\n  \n  // if (dt.month < 9) {\n  //   parts.push(`0${dt.month}`)\n  // } else {\n  //   parts.push(`${dt.month}`)\n  // }\n\n  // if (dt.day < 10) {\n  //   parts.push(`0${dt.day}`)\n  // } else {\n  //   parts.push(`${dt.day}`)\n  // }\n\n  // return parts.join(\"-\")\n}","import React from \"react\"\nimport DateFnsUtils from \"@date-io/date-fns\"\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker } from \"@material-ui/pickers\"\nimport { MaterialUiPickersDate } from \"@material-ui/pickers/typings/date\"\n\n\ntype Props = {\n  inputDate: Date | null\n  setInputDate: (date: Date | null) => void\n}\n\nexport default function DateSelector(props: Props) {\n  const handleDateChange = (date: MaterialUiPickersDate) => {\n    props.setInputDate(date)\n  }\n\n  return (\n    <section className=\"DateSelector\">\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <KeyboardDatePicker\n          value={props.inputDate}\n          disableToolbar\n          variant=\"inline\"\n          format=\"MM/dd/yyyy\"\n          margin=\"normal\"\n          label=\"Date\"\n          animateYearScrolling={true}\n          onChange={handleDateChange} />\n      </MuiPickersUtilsProvider>\n    </section>\n  )\n}\n","import { LogLabelJSON } from \"./type_definitions\"\n\nexport const alphabetOrder = (a: LogLabelJSON, b: LogLabelJSON): number => {\n  if (a.name < b.name) {\n    return -1\n  }\n  if (a.name > b.name) {\n    return 1\n  }\n  return 0\n}\n","import React from \"react\"\nimport {\n  Button,\n  FormControl,\n  Chip,\n  Grid,\n  Typography,\n  InputLabel,\n  Select,\n  MenuItem } from \"@material-ui/core\"\nimport MusicNote from \"@material-ui/icons/MusicNote\"\nimport AddIcon from '@material-ui/icons/Add'\nimport { LogLabelJSON } from \"../../shared/type_definitions\"\nimport { alphabetOrder } from \"../../shared/callbacks\"\n\ntype Props = {\n  // Root data\n  logLabels: LogLabelJSON[] // All log labels\n\n  // Users modifiable fields\n  inputLabelList: LogLabelJSON[]\n  setInputLabelList: (list: LogLabelJSON[]) => void\n  removeFromInputLabelList: (id: string) => void\n}\n\nexport default function LabelSelector(props: Props) {\n\n  const [selectedLabelID, setSelectLabelID] = React.useState<string | null>(null)\n\n  if (props.logLabels.length === 0) {\n    return <Typography>Create a Label</Typography>\n  }\n\n  const isLabelSelectedAlready = (labelID: string): boolean => {\n    const found = props.inputLabelList.find(\n      (label: LogLabelJSON) => label.id === labelID\n    )\n    return Boolean(found)\n  }\n\n  const findLabelFromProps = (labelID: string): LogLabelJSON | undefined => {\n    return props.logLabels.find(\n      (label: LogLabelJSON) => label.id === labelID\n    )\n  }\n\n  const makeHandlerRemoveFromInputLabelList = (labelID: string) => () => {\n    props.removeFromInputLabelList(labelID)\n  }\n\n  const handleOnChange = (ev: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n    setSelectLabelID(ev.target.value as string)\n  }\n\n  const handleAddLabel = () => {\n    if (selectedLabelID === null) {\n      return\n    }\n\n    if (isLabelSelectedAlready(selectedLabelID)) {\n      return\n    }\n\n    const newInputLabelList = [...props.inputLabelList]\n\n    const labelToAdd = findLabelFromProps(selectedLabelID)\n    if (labelToAdd) {\n      newInputLabelList.push(labelToAdd)\n    }\n\n    if (labelToAdd &&\n        labelToAdd.parent_id !== null &&\n        !isLabelSelectedAlready(labelToAdd.parent_id)\n    ) {\n        const parentToAdd = findLabelFromProps(labelToAdd.parent_id)\n        if (parentToAdd) {\n          newInputLabelList.push(parentToAdd)\n        }\n      }\n    props.setInputLabelList(newInputLabelList)\n  }\n\n  const chips = props.inputLabelList.map((label: LogLabelJSON) => {\n    return (\n      <Grid item>\n        <Chip\n          style={{ margin: \"0.1rem\" }}\n          label={label.name}\n          icon={<MusicNote />}\n          color=\"primary\"\n          onDelete={makeHandlerRemoveFromInputLabelList(label.id)} />\n      </Grid>\n    )\n  })\n\n  return (\n    <section className=\"LabelSelector\">\n      <Grid direction=\"row\" justify=\"flex-start\" alignItems=\"center\" container spacing={0}>\n        {chips}\n      </Grid>\n      <Grid direction=\"row\" justify=\"flex-end\" alignItems=\"flex-end\" container spacing={0}>\n        <Grid item>\n        <FormControl style={{width: \"200px\"}}>\n          <InputLabel id=\"label-selector-label\">Label</InputLabel>\n            <Select\n              labelId=\"label-selector-label\"\n              id=\"label-selector\"\n              value={selectedLabelID}\n              onChange={handleOnChange}>\n                {props.logLabels.sort(alphabetOrder).map((label: LogLabelJSON) => {\n                  return <MenuItem value={label.id}>\n                    {label.name}\n                  </MenuItem>\n                })}\n            </Select>\n        </FormControl>\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            style={{marginLeft: \"0.5rem\"}}\n            onClick={handleAddLabel}\n            startIcon={<AddIcon/>}>\n            Add Label\n          </Button>\n        </Grid>\n      </Grid>\n    </section>\n  )\n}\n","import { Typography, Slider } from \"@material-ui/core\"\nimport React from \"react\"\n\ntype Props = {\n  inputDuration: number\n  setInputDuration: (number: number) => void\n}\n\nexport default function DurationSelector(props: Props) {\n  const handleOnChange = (_: React.ChangeEvent<{}>, value: unknown) => {\n    props.setInputDuration(value as number)\n  }\n\n  return (\n    <section className=\"DurationSelector\">\n      <Typography id=\"discrete-minute-slider\" gutterBottom>\n        Duration: {props.inputDuration} minutes\n      </Typography>\n      <Slider\n        defaultValue={0}\n        value={props.inputDuration}\n        onChange={handleOnChange}\n        aria-labelledby=\"discrete-minute-slider\"\n        valueLabelDisplay=\"auto\"\n        step={5}\n        marks={true}\n        min={0}\n        max={180} />\n    </section>\n  )\n}\n","import { TextField } from '@material-ui/core'\nimport React from 'react'\n\ntype Props = {\n  inputMessage: string\n  setInputMessage: (message: string) => void\n}\n\nexport default function MessageEditor(props: Props) {\n  const handleOnChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    props.setInputMessage(ev.target.value)\n  }\n\n  return (\n    <section className=\"MessageEditor\">\n      <TextField\n        label=\"Log Message\"\n        value={props.inputMessage}\n        onChange={handleOnChange}\n        fullWidth\n        InputLabelProps={{ shrink: true }} />\n    </section>\n  )\n}\n","import {\n  List,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton, \n  Button,\n  Grid,\n  TextField} from \"@material-ui/core\"\nimport React from \"react\"\nimport { LogAssignmentJSON } from \"../../shared/type_definitions\"\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\nimport EditIcon from '@material-ui/icons/Edit'\nimport DeleteIcon from '@material-ui/icons/Delete'\n\ntype Props = {\n  inputAssignmentList: LogAssignmentJSON[]\n  setInputAssignmentList: (list: LogAssignmentJSON[]) => void\n}\n\nexport default function AssignmentEditor(props: Props) {\n  const [textFieldAssignmentName, setTextFieldAssignmentName] = React.useState<string>(\"\")\n  const [selectedAssignment, setSelectedAssignment] = React.useState<LogAssignmentJSON | null>(null)\n\n  // Optional Input: event: React.MouseEvent<HTMLButtonElement, MouseEvent> for button\n  const makeHandlerDeleteAssignment = (assignment: LogAssignmentJSON) => () => {\n    const newAssignmentList = [...props.inputAssignmentList]\n    newAssignmentList.splice(assignment.position, 1)\n    for (let i = 0; i < newAssignmentList.length; i++) {\n      newAssignmentList[i].position = i\n    }\n\n    props.setInputAssignmentList(newAssignmentList)\n  }\n\n  const makeHandlerEditAssignment =(assignment: LogAssignmentJSON) => () => {\n    setSelectedAssignment(assignment)\n    setTextFieldAssignmentName(assignment.name)\n  }\n\n  let assignmentListItems: JSX.Element[] = []\n  if (props.inputAssignmentList) {\n    assignmentListItems = props.inputAssignmentList.map((assignment: LogAssignmentJSON) => {\n      return (\n        <ListItem>\n          <FormatListBulletedIcon color=\"action\" />\n          <ListItemText primary={assignment.name} style={{\"marginLeft\": \"1rem\"}}/>\n          <ListItemSecondaryAction>\n            <IconButton edge=\"end\" aria-label=\"Edit\" onClick={makeHandlerEditAssignment(assignment)}>\n              <EditIcon />\n            </IconButton>\n            <IconButton edge=\"end\" aria-label=\"Delete\" onClick={makeHandlerDeleteAssignment(assignment)}>\n              <DeleteIcon />\n            </IconButton>\n          </ListItemSecondaryAction>\n        </ListItem>\n      )\n    })\n  }\n\n  const handleFormSubmitAssignment = (ev: React.FormEvent<HTMLFormElement>) => {\n    ev.preventDefault()\n    let newAssignmentList: LogAssignmentJSON[] = []\n    if (Boolean(props.inputAssignmentList)) {\n      newAssignmentList = [...props.inputAssignmentList]\n    }\n    if (selectedAssignment !== null) {\n      newAssignmentList[selectedAssignment.position].name = textFieldAssignmentName\n      newAssignmentList[selectedAssignment.position].completed = false\n    } else {\n      newAssignmentList.push({\n        position: newAssignmentList.length,\n        name: textFieldAssignmentName,\n        completed: false\n      })\n    }\n\n    setTextFieldAssignmentName(\"\")\n    setSelectedAssignment(null)\n    props.setInputAssignmentList(newAssignmentList)\n  }\n\n  const handleOnChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    setTextFieldAssignmentName(ev.target.value)\n  }\n\n  const buttons: JSX.Element[] = [\n    <Grid item>\n      <TextField\n        style={{width: \"500px\"}}\n        label=\"Assignment Name\"\n        value={textFieldAssignmentName}\n        onChange={handleOnChange}\n        fullWidth\n        InputLabelProps={{ shrink: true }} />\n    </Grid>\n  ]\n\n  if (selectedAssignment !== null) {\n    buttons.push(\n      <Grid item>\n        <Button\n          form=\"assignment-submission-form\"\n          type=\"submit\"\n          variant=\"outlined\"\n          color=\"primary\"\n          style={{marginLeft: \"0.5rem\"}}>\n            Save Assignment {selectedAssignment.position}\n        </Button>\n      </Grid>\n    )\n  } else {\n    let newPosition: number = 0\n    if (props.inputAssignmentList) {\n      newPosition = props.inputAssignmentList.length\n    }\n\n    buttons.push(\n      <Grid item>\n        <Button\n          form=\"assignment-submission-form\"\n          type=\"submit\"\n          variant=\"outlined\"\n          color=\"primary\"\n          style={{marginLeft: \"0.5rem\"}}>\n            Add Assignment {newPosition}\n        </Button>\n      </Grid>\n    )\n  }\n\n  buttons.push(\n    <Grid item>\n      <Button\n        variant=\"outlined\"\n        color=\"secondary\"\n        onClick={() => { setSelectedAssignment(null) }}\n        disabled={selectedAssignment === null}\n        style={{marginLeft: \"0.5rem\"}}>\n          Clear\n      </Button>\n    </Grid>\n  )\n\n  return (\n    <section className=\"AssignmentEditor\">\n      <List dense={false}>{assignmentListItems}</List>\n      <form\n        id=\"assignment-submission-form\"\n        onSubmit={handleFormSubmitAssignment}>\n        <Grid container \n          direction=\"row\"\n          justify=\"flex-end\"\n          alignItems=\"flex-end\"\n          spacing={0}\n          style={{ marginTop: \"1rem \"}}>\n          {buttons}\n        </Grid>\n      </form>\n    </section>\n  )\n}\n","import React from 'react'\nimport { \n  Grid,\n  Button } from '@material-ui/core'\nimport {\n  LogLabelJSON,\n  LogAssignmentJSON,\n  LogEntryJSON,\n  Mode } from '../../shared/type_definitions'\nimport SaveIcon from '@material-ui/icons/Save'\nimport AddIcon from '@material-ui/icons/Add'\n\ntype Props = {\n  mode: Mode\n  inputID: string | null\n  inputDate: Date | null\n  inputDuration: number\n  inputMessage: string\n  inputLabelList: LogLabelJSON[]\n  inputAssignmentList: LogAssignmentJSON[]\n  handleHTTPUpdateLogEntry: (entry: LogEntryJSON) => void\n  handleHTTPCreateLogEntry: (entry: LogEntryJSON) => void\n  handleDeselectLogEntry: () => void\n}\n\nexport default function Submission(props: Props) {\n  const buttonStyle = { margin: \"0.1rem\" }\n  let buttonGridItems: JSX.Element[] = []\n  switch (props.mode) {\n    case Mode.EditEntry:\n      buttonGridItems = [\n        <Grid item>\n          <Button style={buttonStyle} variant=\"contained\" color=\"primary\" startIcon={<SaveIcon />}\n            onClick={ () => {\n              const entry: LogEntryJSON = {\n                id: props.inputID as string,\n                user_id: \"calvin.j.feng@gmail.com\",\n                date: new Date(),\n                duration: props.inputDuration,\n                message: props.inputMessage,\n                labels: props.inputLabelList,\n                assignments: props.inputAssignmentList,\n                details: \"\",\n              }\n              if (props.inputDate !== null) {\n                entry.date = props.inputDate\n              }\n              console.log(\"update log entry with date\", entry.date.toISOString())\n              props.handleHTTPUpdateLogEntry(entry)\n            }}>\n            Save Entry\n          </Button>\n        </Grid>,\n        <Grid item>\n          <Button style={buttonStyle} variant=\"contained\" color=\"secondary\"\n            onClick={props.handleDeselectLogEntry}>\n            Cancel\n          </Button>\n        </Grid>\n      ]\n      break\n    case Mode.NewEntry:\n      buttonGridItems = [\n        <Grid item>\n          <Button style={buttonStyle} variant=\"contained\" color=\"primary\" startIcon={<AddIcon />}\n            onClick={() => {\n              const entry: LogEntryJSON = {\n                id: \"00000000-0000-0000-0000-000000000000\",\n                user_id: \"calvin.j.feng@gmail.com\",  \n                date: new Date(),\n                duration: props.inputDuration,\n                message: props.inputMessage,\n                labels: props.inputLabelList, \n                assignments: props.inputAssignmentList,\n                details: \"\",\n              }\n              if (props.inputDate !== null) {\n                entry.date = props.inputDate\n              }\n              console.log(\"create log entry with date\", entry.date.toISOString())\n              props.handleHTTPCreateLogEntry(entry)\n            }}>\n            New Entry\n          </Button>\n        </Grid>,\n        <Grid item>\n          <Button\n            style={buttonStyle}\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={props.handleDeselectLogEntry}>\n            Cancel\n          </Button>\n        </Grid>\n      ]\n      break\n  }\n\n  return (\n    <Grid container \n      direction=\"row\" justify=\"flex-end\" alignItems=\"flex-end\" spacing={0} style={{ marginTop: \"1rem \"}}>\n      {buttonGridItems}\n    </Grid>\n  )\n}\n","import React from 'react'\nimport {\n  Typography,\n  Paper } from '@material-ui/core'\nimport {\n  LogAssignmentJSON,\n  LogEntryJSON,\n  LogLabelJSON, \n  Mode } from '../../shared/type_definitions'\n\nimport DateSelector from './DateSelector'\nimport LabelSelector from './LabelSelector'\nimport DurationSelector from './DurationSelector'\nimport MessageEditor from './MessageEditor'\nimport AssignmentEditor from './AssignmentEditor'\n\nimport './LogEntryManagement.scss'\nimport Submission from './Submission'\n\ntype Props = {\n  // Prefix selected means the current entity is selected for modification.\n  // The assumption is that the entity already exists.\n  selectedLogEntry: LogEntryJSON | null\n\n  // Collection of all labels\n  logLabels: LogLabelJSON[]\n\n  handleDeselectLogEntry: () => void\n  handleHTTPCreateLogEntry: (logEntry: LogEntryJSON) => void\n  handleHTTPUpdateLogEntry: (logEntry: LogEntryJSON) => void\n}\n\ntype State = {\n  mode: Mode\n\n  // Input represents value that will be submitted to backend\n  // Each input state reflects the value of an input element.\n  inputID: string | null\n  inputDate: Date | null\n  inputDuration: number\n  inputMessage: string\n  inputLabelList: LogLabelJSON[]\n  inputAssignmentList: LogAssignmentJSON[]\n}\n\nconst defaultState: State = {\n  mode: Mode.NewEntry,\n  inputID: null,\n  inputDate: new Date(),\n  inputDuration: 0,\n  inputMessage: \"\",\n  inputLabelList: [],\n  inputAssignmentList: [],\n}\n\nexport default class LogEntryManagement extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    if (props.selectedLogEntry == null) {\n      this.state = defaultState\n    } else {\n      // If selectedLogEntry has a nil ID, we are creating a new entry.\n      let mode: Mode = Mode.EditEntry\n      if (props.selectedLogEntry.id.length === 0) {\n        mode = Mode.NewEntry\n      }\n\n      this.state = {\n        mode: mode,\n        inputID: props.selectedLogEntry.id,\n        inputDate: props.selectedLogEntry.date,\n        inputDuration: props.selectedLogEntry.duration,\n        inputMessage: props.selectedLogEntry.message,\n        inputLabelList: props.selectedLogEntry.labels,\n        inputAssignmentList: props.selectedLogEntry.assignments,\n      }\n    }\n  }\n\n  componentWillReceiveProps(nextProps: Props) {\n    if (nextProps.selectedLogEntry === null && this.props.selectedLogEntry === null) {\n      return\n    }\n\n    if (nextProps.selectedLogEntry === null) {\n      this.setState(defaultState)\n      return\n    }\n\n    let mode: Mode = Mode.EditEntry\n    if (nextProps.selectedLogEntry.id.length === 0) {\n      mode = Mode.NewEntry\n    }\n\n    this.setState({\n      mode: mode,\n      inputID: nextProps.selectedLogEntry.id,\n      inputDate: nextProps.selectedLogEntry.date,\n      inputDuration: nextProps.selectedLogEntry.duration,\n      inputMessage: nextProps.selectedLogEntry.message,\n      inputLabelList: nextProps.selectedLogEntry.labels,\n      inputAssignmentList: nextProps.selectedLogEntry.assignments,\n    })\n  }\n\n  handleSetInputDate = (value: Date | null) => {\n    this.setState({ inputDate: value })\n  }\n\n  handleSetInputDuration = (value: number) => {\n    this.setState({ inputDuration: value})\n  }\n\n  handleSetInputLabelList = (value:  LogLabelJSON[]) => {\n    this.setState({ inputLabelList: value })\n  }\n  \n  handleSetInputAssignmentList = (value: LogAssignmentJSON[]) => {\n    this.setState({ inputAssignmentList: value})\n  }\n\n  handleSetInputMessage = (value: string) => {\n    this.setState({ inputMessage: value })\n  }\n\n  handleRemoveFromInputLabelList = (labelID: string) => {\n    this.setState({\n      inputLabelList: this.state.inputLabelList.filter((label: LogLabelJSON) => {\n       return label.id !== labelID\n     })\n    })\n  }\n\n  get header() {\n    switch(this.state.mode) {\n      case Mode.EditEntry:\n        return <Typography variant=\"h5\">Edit Log Entry {this.state.inputID}</Typography>\n      case Mode.NewEntry:\n        return <Typography variant=\"h5\">Add Log Entry</Typography>\n      default:\n        return <Typography variant=\"h5\"></Typography>\n    }\n  }\n\n  render() {\n    return (\n      <Paper className=\"LogEntryManagement\">\n        {this.header}\n        <DateSelector\n          inputDate={this.state.inputDate}\n          setInputDate={this.handleSetInputDate} />\n        <LabelSelector\n          logLabels={this.props.logLabels}\n          inputLabelList={this.state.inputLabelList}\n          removeFromInputLabelList={this.handleRemoveFromInputLabelList}\n          setInputLabelList={this.handleSetInputLabelList} />\n        <DurationSelector\n          inputDuration={this.state.inputDuration}\n          setInputDuration={this.handleSetInputDuration} />\n        <MessageEditor\n          inputMessage={this.state.inputMessage}\n          setInputMessage={this.handleSetInputMessage} />\n        <AssignmentEditor\n          inputAssignmentList={this.state.inputAssignmentList}\n          setInputAssignmentList={this.handleSetInputAssignmentList} />\n        <Submission \n          mode={this.state.mode}\n          inputID={this.state.inputID}\n          inputDate={this.state.inputDate}\n          inputDuration={this.state.inputDuration}\n          inputMessage={this.state.inputMessage}\n          inputLabelList={this.state.inputLabelList}\n          inputAssignmentList={this.state.inputAssignmentList}\n          handleHTTPUpdateLogEntry={this.props.handleHTTPUpdateLogEntry}\n          handleHTTPCreateLogEntry={this.props.handleHTTPCreateLogEntry}\n          handleDeselectLogEntry={this.props.handleDeselectLogEntry} />\n      </Paper>\n    )\n  }\n}\n","import React from 'react'\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Button\n} from '@material-ui/core'\nimport { DeleteConfirmationTarget, LogLabelJSON } from '../../shared/type_definitions'\n\ntype Props = {\n  open: boolean\n  handleClose: () => void\n  handleDeleteChildLabel: () => void\n  handleDeleteParentLabel: () => void\n  selectedParentLabel: LogLabelJSON | null\n  selectedChildLabel: LogLabelJSON | null\n  target: DeleteConfirmationTarget\n}\n\nexport default function DeleteConfirmation(props: Props) {\n  if (props.selectedChildLabel != null && props.target === DeleteConfirmationTarget.Child) {\n    return (\n      <Dialog open={props.open} onClose={props.handleClose}>\n        <DialogTitle>Delete {props.selectedChildLabel.name}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Are you sure you want to delete {props.selectedChildLabel.name}?\n          </DialogContentText>\n          <DialogContentText>\n            Child label {props.selectedChildLabel.id} will be deleted. The effect will propagate to\n            all log entries.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={props.handleClose} color=\"primary\">Cancel</Button>\n          <Button onClick={props.handleClose} color=\"secondary\" disabled={true}>\n            Confirm Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  if (props.selectedParentLabel != null && props.target === DeleteConfirmationTarget.Parent) {\n    return (\n      <Dialog open={props.open} onClose={props.handleClose}>\n        <DialogTitle>Delete {props.selectedParentLabel.name}</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Are you sure you want to delete {props.selectedParentLabel.name}?\n          </DialogContentText>\n          <DialogContentText>\n            Parent label {props.selectedParentLabel.id} will be deleted. This will affect all nested\n            child labels and log entries.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button autoFocus onClick={props.handleClose} color=\"primary\">Cancel</Button>\n          <Button onClick={props.handleClose} color=\"secondary\" disabled={true}>\n            Confirm Delete\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  return <div></div>\n}","import React from 'react'\n\nimport {\n  Grid,\n  Chip,\n  Paper,\n  Divider,\n  Typography,\n  Button,\n  TextField,\n} from '@material-ui/core'\nimport { MusicNote } from '@material-ui/icons'\n\nimport { DeleteConfirmationTarget, LogLabelJSON, nilUUID } from '../../shared/type_definitions'\nimport DeleteConfirmation from './DeleteConfirmation'\nimport './LogLabelManagement.scss'\n\ntype State = {\n  selectedParentLabel: LogLabelJSON | null\n  selectedChildLabel: LogLabelJSON | null\n  inputParentLabelName: string\n  inputChildLabelName: string\n  showDeleteDialog: boolean\n  deleteTarget: DeleteConfirmationTarget\n}\n\ntype Props = {\n  logLabels: LogLabelJSON[]\n  handleHTTPCreateLogLabel: (label: LogLabelJSON) => void\n  handleHTTPUpdateLogLabel: (label: LogLabelJSON) => void\n  handleHTTPDeleteLogLabel: (label: LogLabelJSON) => void\n}\n\nconst defaultState: State = {\n  selectedParentLabel: null,\n  selectedChildLabel: null,\n  inputParentLabelName: \"\",\n  inputChildLabelName: \"\",\n  showDeleteDialog: false,\n  deleteTarget: DeleteConfirmationTarget.None\n}\n\nexport default class LabelManagement extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = defaultState\n  }\n\n  newHandlerSelectParentLabel = (label: LogLabelJSON | null) => () => {\n    // Whenever parent is selected, child states should be cleared.\n    if (label === null) {\n      this.setState({\n        inputParentLabelName: \"\",\n        inputChildLabelName: \"\",\n        selectedParentLabel: null,\n        selectedChildLabel: null\n      })\n    } else {\n      this.setState({\n        inputParentLabelName: label.name,\n        inputChildLabelName: \"\",\n        selectedParentLabel: label,\n        selectedChildLabel: null,\n      })\n    }\n  }\n\n  newHandlerSelectChildLabel = (label: LogLabelJSON | null) => () => {\n    if (label === null) {\n      this.setState({\n        inputChildLabelName: \"\",\n        selectedChildLabel: null\n      })\n    } else {\n      this.setState({\n        inputChildLabelName: label.name,\n        selectedChildLabel: label\n      })\n    }\n  }\n\n  handleCreateParentLabel = () => {\n    const newLabel: LogLabelJSON = {\n      id: nilUUID,\n      parent_id: null,\n      children: [],\n      name: this.state.inputParentLabelName\n    }\n    this.props.handleHTTPCreateLogLabel(newLabel)\n    // TODO: Use Promise!!!\n    this.setState(defaultState)\n  }\n\n  handleUpdateParentLabel = () => {\n    if (this.state.selectedParentLabel !== null) {\n      const payload: LogLabelJSON = {\n        id: this.state.selectedParentLabel.id,\n        parent_id: nilUUID,\n        name: this.state.inputParentLabelName,\n        children: [],\n      }\n      this.props.handleHTTPUpdateLogLabel(payload)\n      // TODO: Use Promise!!!\n      this.setState(defaultState)\n    }\n  }\n\n  handleDeleteParentLabel = () => {\n    if (this.state.selectedParentLabel !== null) {\n      this.props.handleHTTPDeleteLogLabel(this.state.selectedParentLabel)\n      this.setState(defaultState)\n    }\n  }\n\n  handleClickCreateChildLabel = () => {\n    if (this.state.selectedParentLabel !== null ) {\n      const newLabel: LogLabelJSON = {\n        id: nilUUID,\n        parent_id: this.state.selectedParentLabel.id,\n        name: this.state.inputChildLabelName,\n        children: [],\n      }\n      this.props.handleHTTPCreateLogLabel(newLabel)\n      // TODO: Use Promise!!!\n      this.setState(defaultState)\n    }\n  }\n\n  handleUpdateChildLabel = () => {\n    if (this.state.selectedChildLabel !== null) {\n      const payload: LogLabelJSON = {\n        id: this.state.selectedChildLabel.id,\n        parent_id: this.state.selectedChildLabel.parent_id,\n        name: this.state.inputChildLabelName,\n        children: [],\n      }\n      this.props.handleHTTPUpdateLogLabel(payload)\n      // TODO: Use Promise!!!\n      this.setState(defaultState)\n    }\n  }\n\n  handleDeleteChildLabel = () => {\n    if (this.state.selectedChildLabel !== null) {\n      this.props.handleHTTPDeleteLogLabel(this.state.selectedChildLabel)\n      this.setState(defaultState)\n    }\n  }\n\n  handleParentLabelNameChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ inputParentLabelName: ev.target.value })\n  }\n\n  handleChildLabelNameChange = (ev: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ inputChildLabelName: ev.target.value })\n  }\n\n  handleCloseDeleteDialog = () => {\n    this.setState({ showDeleteDialog: false, deleteTarget: DeleteConfirmationTarget.None })\n  }\n\n  get panelParentLabels() {\n    const items: JSX.Element[] = this.props.logLabels.filter((label: LogLabelJSON) => {\n      return label.parent_id === nilUUID\n    }).map((label: LogLabelJSON) => {\n      let style = { margin: \"0.1rem\" }\n      let handler = this.newHandlerSelectParentLabel(label)\n      if (this.state.selectedParentLabel !== null && this.state.selectedParentLabel.id === label.id) {\n        style[\"background\"] = \"green\"\n        handler = this.newHandlerSelectParentLabel(null)\n      }\n      return (\n        <Grid item>\n          <Chip\n            onClick={handler}\n            style={style}\n            label={label.name}\n            icon={<MusicNote />}\n            color=\"primary\" />\n        </Grid>\n      )\n    })\n    return (\n      <Grid\n        style={{ width: \"30%\", margin: \"0.5rem\" }}\n        direction=\"row\"\n        justify=\"flex-start\"\n        alignItems=\"center\"\n        container\n        spacing={0}>\n        {items}\n      </Grid>\n    )\n  }\n\n  get panelChildLabels() {\n    const items: JSX.Element[] = this.props.logLabels.filter((label: LogLabelJSON) => {\n      if (this.state.selectedParentLabel === null) {\n        return false\n      }\n      return label.parent_id === this.state.selectedParentLabel.id\n    }).map((label: LogLabelJSON) => {      \n      let style = { margin: \"0.1rem\" }\n      let handler = this.newHandlerSelectChildLabel(label)\n      if (this.state.selectedParentLabel !== null && \n        this.state.selectedChildLabel !== null &&\n        this.state.selectedChildLabel.id === label.id) {\n        style[\"background\"] = \"green\"\n        handler = this.newHandlerSelectChildLabel(null)\n      }\n\n      return (\n        <Grid item>\n          <Chip\n            onClick={handler}\n            style={style}\n            label={label.name}\n            icon={<MusicNote />}\n            color=\"primary\" />\n        </Grid>\n      )\n    })\n\n    return (\n      <Grid\n        style={{ width: \"30%\", margin: \"0.5rem\" }}\n        direction=\"row\"\n        justify=\"flex-start\"\n        alignItems=\"center\"\n        container\n        spacing={0}>\n        {items}\n      </Grid>\n    )\n  }\n\n  get selectedChildLabelButtonGroup() {\n    if (this.state.selectedParentLabel === null || this.state.selectedChildLabel === null) {\n      return []\n    }\n    return [\n      <Grid item>\n        <Typography variant=\"subtitle1\">\n          Selected Child Label: {this.state.selectedChildLabel.name}\n        </Typography>\n      </Grid>,\n      <Grid item>\n        <TextField label=\"Child Label Name\" value={this.state.inputChildLabelName}\n          onChange={this.handleChildLabelNameChange} fullWidth InputLabelProps={{ shrink: true }} />\n      </Grid>,\n      <Grid item>\n        <Button style={{margin: \"0.1rem\"}} onClick={this.handleUpdateChildLabel}\n          disabled={this.state.inputChildLabelName === this.state.selectedChildLabel.name}\n          variant=\"contained\" color=\"primary\">\n          Update\n        </Button>\n        <Button style={{margin: \"0.1rem\"}} onClick={\n            () => {\n              this.setState({ showDeleteDialog: true, deleteTarget: DeleteConfirmationTarget.Child})\n            }\n          }\n          variant=\"contained\" color=\"secondary\">\n          Delete {this.state.selectedChildLabel.name}\n        </Button>\n      </Grid>\n    ]\n  }\n\n  get selectedParentLabelButtonGroup() {\n    if (this.state.selectedParentLabel === null) {\n      return []\n    }\n    return [\n      <Grid item>\n        <Typography variant=\"subtitle1\">\n          Selected Parent Label: {this.state.selectedParentLabel.name}\n        </Typography>\n      </Grid>,\n      <Grid item>\n        <TextField\n          label=\"Parent Label Name\" value={this.state.inputParentLabelName} onChange={this.handleParentLabelNameChange}\n          fullWidth InputLabelProps={{ shrink: true }} />\n      </Grid>,\n      <Grid item>\n      <TextField\n        label=\"Child Label Name\" value={this.state.inputChildLabelName} onChange={this.handleChildLabelNameChange}\n        fullWidth InputLabelProps={{ shrink: true }} />\n      </Grid>,\n      <Grid item>\n        <Button style={{margin: \"0.1rem\"}} onClick={this.handleClickCreateChildLabel}\n          disabled={this.state.inputChildLabelName.length === 0}\n          variant=\"contained\" color=\"primary\">\n            Create Child\n        </Button>\n        <Button style={{margin: \"0.1rem\"}} onClick={this.handleUpdateParentLabel}\n          disabled={this.state.inputParentLabelName === this.state.selectedParentLabel.name}\n          variant=\"contained\" color=\"primary\">\n            Update\n        </Button>\n        <Button style={{margin: \"0.1rem\"}} onClick={\n            () => {\n              this.setState({ showDeleteDialog: true, deleteTarget: DeleteConfirmationTarget.Parent})\n            }\n          }\n          variant=\"contained\" color=\"secondary\">\n          Delete {this.state.selectedParentLabel.name}\n        </Button>\n      </Grid>\n    ]\n  }\n\n  get selectedNoneLabelButtonGroup() {\n    return [\n      <Grid item>\n        <TextField\n          label=\"New Label Name\"\n          value={this.state.inputParentLabelName}\n          onChange={this.handleParentLabelNameChange}\n          fullWidth\n          InputLabelProps={{ shrink: true }} />\n        </Grid>,\n      <Grid item>\n        <Button style={{margin: \"0.1rem\"}} onClick={this.handleCreateParentLabel}\n          variant=\"contained\" color=\"primary\">\n          Create\n        </Button>\n      </Grid>\n    ]\n  }\n\n  get panelEditLabel() {\n    let gridItems: JSX.Element[]\n\n    // Case 1: Parent & child are selected\n    // Case 2: Parent is selected\n    // Case 3: None is selected\n    if (this.state.selectedParentLabel !== null && this.state.selectedChildLabel !== null) {\n      gridItems = this.selectedChildLabelButtonGroup\n    } else if (this.state.selectedParentLabel !== null && this.state.selectedChildLabel === null) {\n      gridItems = this.selectedParentLabelButtonGroup\n    } else {\n      gridItems = this.selectedNoneLabelButtonGroup\n    }\n\n    return (\n      <Grid\n        style={{ width: \"30%\", margin: \"0.5rem\" }}\n        direction=\"column\"\n        justify=\"flex-start\"\n        alignItems=\"flex-start\"\n        container\n        spacing={1}>\n        {gridItems}\n      </Grid>\n    )\n  }\n\n  render() {\n    return (\n      <Paper className=\"LabelManagement\">\n        <Typography variant=\"h5\">Manage Labels</Typography>\n        <Grid\n          style={{ width: \"100%\", marginTop: \"1rem\" }}\n          direction=\"row\"\n          justify=\"flex-start\"\n          alignItems=\"flex-start\"\n          container\n          spacing={1}>\n          {this.panelParentLabels}\n          <Divider orientation=\"vertical\" flexItem />\n          {this.panelChildLabels}\n          <Divider orientation=\"vertical\" flexItem />\n          {this.panelEditLabel}\n        </Grid>\n        <DeleteConfirmation\n          target={this.state.deleteTarget}\n          open={this.state.showDeleteDialog}\n          selectedChildLabel={this.state.selectedChildLabel}\n          selectedParentLabel={this.state.selectedParentLabel}\n          handleClose={this.handleCloseDeleteDialog}\n          handleDeleteChildLabel={this.handleDeleteChildLabel}\n          handleDeleteParentLabel={this.handleDeleteParentLabel} />\n      </Paper>\n    )\n  }\n}\n","import React from 'react'\nimport {\n  Popover,\n  TableHead,\n  TableRow,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  Paper,\n  Checkbox\n} from '@material-ui/core'\n\nimport { LogEntryJSON, LogAssignmentJSON } from '../shared/type_definitions'\nimport './AssignmentChecklistPopover.scss'\n\ntype Props = {\n  focusedLogEntry: LogEntryJSON | null\n  popoverAnchor: HTMLButtonElement | null\n  handleClearPopoverAnchorEl: () => void\n  handleHTTPUpdateLogAssignments: (entry: LogEntryJSON) => void\n}\n\nexport default function AssignmentChecklistPopover(props: Props) {\n  let assignments: LogAssignmentJSON[] = []\n  if (props.focusedLogEntry !== null && props.focusedLogEntry.assignments) {\n    assignments = props.focusedLogEntry.assignments\n  }\n\n  const makeHandlerBoxCheck = (position: number) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (props.focusedLogEntry === null) {\n      return\n    }\n    const entryToUpdate: LogEntryJSON = props.focusedLogEntry as LogEntryJSON\n    entryToUpdate.assignments[position].completed = event.target.checked\n    console.log(entryToUpdate.assignments[position].name, 'set to', event.target.checked)\n    props.handleHTTPUpdateLogAssignments(entryToUpdate)\n  } \n\n  const content = (\n    <TableContainer component={Paper} className=\"table-content\">\n      <Table className={\"assignment-list-table-view\"} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell align=\"left\">Item</TableCell>\n            <TableCell align=\"center\">Done</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {\n            assignments.map((assignment: LogAssignmentJSON) => (\n              <TableRow key={`assignment-item-${assignment.position}`}>\n                <TableCell align=\"left\">\n                  {assignment.name}\n                </TableCell>\n                <TableCell align=\"center\">\n                  <Checkbox\n                    onChange={makeHandlerBoxCheck(assignment.position)}\n                    checked={assignment.completed}\n                    inputProps={{ 'aria-label': 'primary checkbox' }} />\n                </TableCell>\n              </TableRow>\n            ))\n          }\n        </TableBody>\n      </Table>\n    </TableContainer>\n  )\n\n  return (\n    <Popover\n      className=\"AssignmentChecklistPopover\"\n      id={\"assignment-popover\"}\n      open={Boolean(props.popoverAnchor)}\n      anchorEl={props.popoverAnchor}\n      onClose={props.handleClearPopoverAnchorEl}\n      anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n      transformOrigin={{ vertical: 'top', horizontal: 'center' }}>\n      {content}\n    </Popover>\n  )\n}\n","import React from 'react'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport {\n  Accordion,\n  AccordionSummary,\n  Typography,\n  AccordionDetails,\n  Checkbox,\n  FormControlLabel,\n  Divider,\n  FormGroup } from '@material-ui/core';\nimport { Map } from 'immutable'\n\nimport { LogLabelJSON, nilUUID } from '../shared/type_definitions';\nimport { alphabetOrder } from '../shared/callbacks';\nimport './DurationViewer.scss'\n\ntype Props = {\n  logLabels: LogLabelJSON[]\n  logLabelDurations: Map<string, number>\n  fetchLogLabelDuration: (labelID: string) => void\n}\n\n// TODO: Separate the check boxes into two lists\n// One for parents\n// One for child\n// If none is selected, display the total duration spent on guitar.\nexport default function DurationViewer(props: Props) {\n  const [expanded, setExpanded] = React.useState<boolean | undefined>(false)\n  const [selectedLabelID, selectLabelID] = React.useState<string | null>(null)\n\n  const makeCheckHandler = (labelID: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.stopPropagation()\n    if (selectedLabelID === labelID) {\n      selectLabelID(null)\n    } else {\n      selectLabelID(labelID)\n    }\n\n    if (!props.logLabelDurations.get(labelID)) {\n      props.fetchLogLabelDuration(labelID)\n    }\n  }\n\n  const isParent = (label: LogLabelJSON) => label.parent_id === nilUUID\n  const isChild = (label: LogLabelJSON) => label.parent_id !== nilUUID\n\n  const transformToCheckBox = (label: LogLabelJSON) => {\n    let checked = false\n    if (selectLabelID !== null) {\n      checked = selectedLabelID === label.id\n    }\n    return (\n      <FormControlLabel\n        onClick={(event: React.MouseEvent<HTMLLabelElement, MouseEvent>) => event.stopPropagation()}\n        control={\n          <Checkbox\n            checked={checked}\n            onChange={makeCheckHandler(label.id)}\n            name={label.name}\n            color=\"primary\" />}\n        label={label.name} />\n    )\n  }\n\n  let parentCheckBoxes: JSX.Element[] = []\n  let childCheckBoxes: JSX.Element[] = []\n  if (props.logLabels) {\n    parentCheckBoxes = props.logLabels.filter(isParent).sort(alphabetOrder).map(transformToCheckBox)\n    childCheckBoxes = props.logLabels.filter(isChild).sort(alphabetOrder).map(transformToCheckBox)\n  }\n\n  const handleExpand = (_: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    setExpanded(!expanded)\n  }\n\n  let content = \"Please select a label to view how much time you've spent on it\"\n  if (selectedLabelID && props.logLabelDurations.get(selectedLabelID)) {\n    const mins = props.logLabelDurations.get(selectedLabelID)\n    content = `You have spent ${Math.floor(mins as number /60)} hours and ${mins as number %60} minutes on it`\n  }\n\n  return (\n    <Accordion className=\"DurationViewer\" expanded={expanded} onClick={handleExpand}>\n      <AccordionSummary\n        expandIcon={<ExpandMoreIcon />}>\n        <FormGroup className=\"parent-form-group\" row>\n          {parentCheckBoxes}\n        </FormGroup>\n        <Divider />\n        <FormGroup className=\"child-form-group\" row>\n          {childCheckBoxes}\n        </FormGroup>\n      </AccordionSummary>\n      <AccordionDetails>\n        <Typography variant=\"body1\">\n          {content}\n        </Typography>\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n","import React from 'react'\nimport './PracticeLog.scss'\n\nimport {\n  Typography,\n  Grid,\n  Button,\n  Snackbar,\n} from '@material-ui/core'\nimport MuiAlert, { AlertProps, Color } from '@material-ui/lab/Alert';\nimport axios, { AxiosInstance, AxiosResponse }  from 'axios'\n\nimport { LogEntryJSON, LogLabelJSON, LogLabelDurationJSON } from '../shared/type_definitions'\nimport LogTable from '../components/LogTable'\nimport LogEntryManagement from '../components/log_entry_management/LogEntryManagement'\nimport LogLabelManagement from '../components/log_label_management/LogLabelManagement'\nimport AssignmentChecklistPopover from '../components/AssignmentChecklistPopover'\nimport DurationViewer from '../components/DurationViewer';\nimport { Map } from 'immutable'\n\ntype Props = {\n  IDToken: string\n}\n\ntype State = {\n  // Store\n  logEntries: LogEntryJSON[]\n  logLabels: LogLabelJSON[]\n  logLabelDurations: Map<string, number>\n\n  // User interaction\n  selectedLogEntry: LogEntryJSON | null\n  focusedLogEntry: LogEntryJSON | null\n\n  // Paginations\n  pageNum: number\n  hasNextPage: boolean\n\n  // Popover\n  popoverAnchor: HTMLButtonElement | null\n\n  // Alerts\n  alertShown: boolean\n  alertMessage: string\n  alertSeverity: Color\n}\n\nexport default class PracticeLog extends React.Component<Props, State> {\n  private http: AxiosInstance\n  private pageAnchor: HTMLDivElement | null\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      logEntries: [],\n      logLabels: [],\n      logLabelDurations: Map<string, number>(),\n      selectedLogEntry: null,\n      focusedLogEntry: null,\n      pageNum: 1,\n      hasNextPage: false,\n      popoverAnchor: null,\n      alertShown: false,\n      alertMessage: \"\",\n      alertSeverity: \"info\"\n    }\n    this.http = axios.create({\n      baseURL: `${process.env.REACT_APP_API_URL}`,\n      timeout: 1000,\n      headers: {\n        \"Authorization\": props.IDToken\n      }\n    });\n    this.pageAnchor = null\n  }\n\n  componentDidUpdate(_: Props, prevState: State) {\n    if (this.state.pageNum !== prevState.pageNum) {\n      this.fetchLogEntriesByPage(this.state.pageNum)\n    }\n  }\n\n  componentDidMount() {\n    this.fetchLogEntriesByPage(this.state.pageNum)\n    this.fetchLogLabels()\n  }\n\n  /**\n   * This is an internal class helper function to populate log labels as state.\n   */\n  fetchLogLabels() {\n    this.http.get('/api/v1/log/labels')\n      .then((resp: AxiosResponse) => {\n        const labels: LogLabelJSON[] = resp.data.results\n        let childrenIDByParentID = Map<string, string[]>()\n        labels.forEach((label: LogLabelJSON) => {\n          if (label.parent_id) {\n            let children = childrenIDByParentID.get(label.parent_id)\n            if (!children) {\n              children = []\n            }\n            children.push(label.id)\n            // WARNING: Using immutable map\n            childrenIDByParentID = childrenIDByParentID.set(label.parent_id, children)\n          }\n        })\n        labels.forEach((label: LogLabelJSON) => {\n          if (childrenIDByParentID.get(label.id)) {\n            label.children = childrenIDByParentID.get(label.id) as string[]\n          } else {\n            label.children = []\n          }\n        })\n        this.setState({\n          logLabels: labels\n        })\n      })\n      .catch((reason: any) => {\n        this.setState({\n          alertShown: true,\n          alertMessage: `Failed to list log labels due to ${reason}`,\n          alertSeverity: \"error\"\n        })\n      })\n  }\n\n  /**\n   * This fetches log label duration from server.\n   * @param labelID indicates which label to fetch duration from.\n   */\n  fetchLogLabelDuration = (labelID: string) => {\n    this.http.get(`/api/v1/log/labels/${labelID}/duration`)\n      .then((resp: AxiosResponse) => {\n        const payload: LogLabelDurationJSON = resp.data\n        this.setState({\n          logLabelDurations: this.state.logLabelDurations.set(payload.id, payload.duration)\n        })\n      })\n      .catch((reason: any) => {\n        this.setState({\n          alertShown: true,\n          alertMessage: `Failed to list log label duration due to ${reason}`,\n          alertSeverity: \"error\"\n        })\n      })\n  }\n  /**\n   * This is an internal class helper function to populate log entries as state.\n   * @param page indicates which page to fetch from.\n   */\n  fetchLogEntriesByPage(page: number) {\n    this.http.get('/api/v1/log/entries', {\n        params: {\n          \"page\": page\n        }\n      })\n      .then((resp: AxiosResponse) => {\n        // time.Time is parsed as string. The string needs to be converted back into date object.\n        const entries: LogEntryJSON[] = []\n        for (let i = 0; i < resp.data.results.length; i++) {\n          entries.push({\n            id: resp.data.results[i].id,\n            date: new Date(resp.data.results[i].date),\n            user_id: resp.data.results[i].user_id,\n            labels: resp.data.results[i].labels,\n            message: resp.data.results[i].message,\n            details: resp.data.results[i].details,\n            duration: resp.data.results[i].duration,\n            assignments: resp.data.results[i].assignments\n          })\n        }\n\n        let selectedLogEntry = this.state.selectedLogEntry\n        if (selectedLogEntry !== null) {\n          entries.find((entry: LogEntryJSON) => entry.id === (selectedLogEntry as LogEntryJSON).id)\n        }\n        this.setState({\n          logEntries: entries,\n          hasNextPage: resp.data.more,\n          selectedLogEntry: selectedLogEntry\n        })\n      })\n      .catch((reason: any) => {\n        this.setState({\n          alertShown: true,\n          alertMessage: `Failed to list log entries due to ${reason}`,\n          alertSeverity: \"error\"\n        })\n      })\n  }\n  /**\n   * This is a callback for child components to call to create a log label.\n   * @param label is the log label to submit to API for create.\n   */\n  handleHTTPCreateLogLabel = (label: LogLabelJSON) => {\n    this.http.post(`/api/v1/log/labels`, label)\n    .then((resp: AxiosResponse) => {\n      if (resp.status === 201) {\n        this.fetchLogLabels()\n        this.setState({\n          alertShown: true,\n          alertMessage: `Successfully created log label ${label.name}`,\n          alertSeverity: \"success\"\n        })\n      }\n    })\n    .catch((reason: any) => {\n      this.setState({\n        alertShown: true,\n        alertMessage: `Failed to create log label ${label.name} due to ${reason}`,\n        alertSeverity: \"error\"\n      })\n    })\n  }\n  /**\n   * This is a callback for child components to call to update a log label.\n   * @param label is the log label to submit to API for update.\n   */\n  handleHTTPUpdateLogLabel = (label: LogLabelJSON) => {\n    this.http.put(`/api/v1/log/labels/${label.id}`, label)\n    .then((resp: AxiosResponse) => {\n      if (resp.status === 200) {\n        this.fetchLogLabels()\n        this.fetchLogEntriesByPage(this.state.pageNum)\n        this.setState({\n          alertShown: true,\n          alertMessage: `Successfully updated log label ${label.name}`,\n          alertSeverity: \"success\"\n        })\n      }\n    })\n    .catch((reason: any) => {\n      this.setState({\n        alertShown: true,\n        alertMessage: `Failed to update log label ${label.name} due to ${reason}`,\n        alertSeverity: \"error\"\n      })\n    })\n  }\n  /**\n   * This is a callback for child components to call to delete a log label.\n   * @param label is the log label to submit to API for delete.\n   */\n  handleHTTPDeleteLogLabel = (label: LogLabelJSON) => {\n    this.http.delete(`/api/v1/log/labels/${label.id}`)\n    .then((resp: AxiosResponse) => {\n      if (resp.status === 200) {\n        this.fetchLogLabels()\n        this.fetchLogEntriesByPage(this.state.pageNum)\n        this.setState({\n          alertShown: true,\n          alertMessage: `Successfully deleted log label ${label.name}`,\n          alertSeverity: \"success\"\n        })\n      }\n    })\n    .catch((reason: any) => {\n      this.setState({\n        alertShown: true,\n        alertMessage: `Failed to delete log label ${label.name} due to ${reason}`,\n        alertSeverity: \"error\"\n      })\n    })\n  }\n  /**\n   * This is a callback for child components to call to delete a log entry.\n   * @param entry is the entry to submit to API for create.\n   */\n  handleHTTPDeleteLogEntry = (entry: LogEntryJSON) => {\n    this.http.delete(`/api/v1/log/entries/${entry.id}`)\n      .then((resp: AxiosResponse) => {\n        if (resp.status === 200) {\n          this.fetchLogEntriesByPage(this.state.pageNum)\n          this.setState({\n            alertShown: true,\n            alertMessage: `Successfully deleted log entry ${entry.id}`,\n            alertSeverity: \"success\"\n          })\n        }\n      })\n      .catch((reason: any) => {\n        this.setState({\n          alertShown: true,\n          alertMessage: `Failed to delete log entry ${entry.id} due to ${reason}`,\n          alertSeverity: \"error\"\n        })\n      })\n  }\n  /**\n   * This is a callback for child components to call to create a log entry.\n   * @param entry is the entry to submit to API For create.\n   */\n  handleHTTPCreateLogEntry = (entry: LogEntryJSON) => {\n    this.http.post(`/api/v1/log/entries`, entry)\n      .then((resp: AxiosResponse) => {\n        if (resp.status === 201) {\n          this.fetchLogEntriesByPage(this.state.pageNum)\n          this.setState({\n            alertShown: true,\n            alertMessage: \"Successfully created new log entry\",\n            alertSeverity: \"success\",\n            selectedLogEntry: null\n          })\n        }\n      })\n      .catch((reason: any) => {\n        this.setState({\n          alertShown: true,\n          alertMessage: `Failed to create log entry due to ${reason}`,\n          alertSeverity: \"error\"\n        })\n      })\n  }\n  /**\n   * This is a callback for child components to call to update a log entry.\n   * It is unnecessary to refresh the page with a HTTP request. I expect frequent update here.\n   * @param entry is the entry to submit to API for assignments update.\n   */\n  handleHTTPUpdateLogAssignments = (entry: LogEntryJSON) => {\n    this.http.put(`/api/v1/log/entries/${entry.id}/assignments`, entry)\n      .then((resp: AxiosResponse) => {\n        const updatedEntry: LogEntryJSON = resp.data\n        const entries = this.state.logEntries\n        for (let i = 0; i < entries.length; i++) {\n          if (entries[i].id === updatedEntry.id) {\n            entries[i] = {\n              id: resp.data.id,\n              date: new Date(resp.data.date),\n              user_id: resp.data.user_id,\n              labels: resp.data.labels,\n              message: resp.data.message,\n              details: resp.data.details,\n              duration: resp.data.duration,\n              assignments: resp.data.assignments\n            }\n            break\n          }\n        }\n        this.setState({\n          logEntries: entries,\n          focusedLogEntry: updatedEntry,\n          alertShown: true,\n          alertSeverity: \"success\",\n          alertMessage: `Successfully updated entry ${entry.id} assignments`\n        })\n      })\n      .catch((reason: any) => {\n        this.setState({\n          alertShown: true,\n          alertMessage: `Failed to update log entry assignment due to ${reason}`,\n          alertSeverity: \"error\"\n        })\n      })\n  }\n  /**\n   * This is a callback for child components to call to update a log entry.\n   * It is unnecessary to refresh the page with a HTTP request. I expect frequent update here.\n   * @param entry is the entry to submit to API for update.\n   */\n  handleHTTPUpdateLogEntry = (entry: LogEntryJSON) => {\n    this.http.put(`/api/v1/log/entries/${entry.id}`, entry)\n      .then((resp: AxiosResponse) => {\n        const updatedEntry: LogEntryJSON = resp.data\n        const entries = this.state.logEntries\n        for (let i = 0; i < entries.length; i++) {\n          if (entries[i].id === updatedEntry.id) {\n            entries[i] = {\n              id: resp.data.id,\n              date: new Date(resp.data.date),\n              user_id: resp.data.user_id,\n              labels: resp.data.labels,\n              message: resp.data.message,\n              details: resp.data.details,\n              duration: resp.data.duration,\n              assignments: resp.data.assignments\n            }\n            break\n          }\n        }\n        this.setState({\n          logEntries: entries,\n          selectedLogEntry: null,\n          alertShown: true,\n          alertSeverity: \"success\",\n          alertMessage: `Successfully updated entry ${entry.id}`\n        })\n      })\n      .catch((reason: any) => {\n        this.setState({\n          alertShown: true,\n          alertMessage: `Failed to update log entry due to ${reason}`,\n          alertSeverity: \"error\"\n        })\n      })\n  }\n\n  scrollToBottom = () => {\n    if (this.pageAnchor) {\n      this.pageAnchor.scrollIntoView({ behavior: 'smooth' });\n    }\n  }\n\n  handleClearPopoverAnchorEl = () => {\n    this.setState({ popoverAnchor: null, focusedLogEntry: null })\n  }\n\n  handleSelectLogEntry = (log: LogEntryJSON) => {\n    this.setState({ selectedLogEntry: log })\n  }\n\n  handleDeselectLogEntry = () => {\n    this.setState({ selectedLogEntry: null })\n  }\n\n  handleFocusLogEntryAndAnchorEl = (event: React.MouseEvent<HTMLButtonElement>, log: LogEntryJSON) => {\n    this.setState({\n      focusedLogEntry: log,\n      popoverAnchor: event.currentTarget\n    })\n  }\n\n  handleCloseAlert = (_ ?: React.SyntheticEvent, reason?: string) => {\n    if (reason !== 'clickaway') {\n      this.setState({alertShown: false});\n    }\n  };\n\n  // TODO: Refactor this out\n  get PaginationControlPanel() {\n    const handlePrevPage = () => {\n      this.setState({ pageNum: this.state.pageNum - 1 })\n    }\n\n    const handleNextPage = () => {\n      this.setState({ pageNum: this.state.pageNum + 1 })\n    }\n\n    const items: JSX.Element[] = []\n    if (this.state.pageNum > 1) {\n      items.push(\n        <Grid item>\n          <Button variant=\"contained\" color=\"primary\" onClick={handlePrevPage}>Prev</Button>\n        </Grid>\n      )\n    }\n\n    if (this.state.hasNextPage) {\n      items.push(\n        <Grid item>\n          <Button variant=\"contained\" color=\"primary\" onClick={handleNextPage}>Next</Button>\n        </Grid>\n      )\n    }\n\n    items.push(\n      <Grid item>\n        <Typography>Page {this.state.pageNum} </Typography>\n      </Grid>\n    )\n\n    return (\n      <Grid container\n        direction=\"row\"\n        justify=\"flex-end\"\n        alignItems=\"baseline\"\n        spacing={1}\n        className=\"pagination-control-panel\">\n        {items}\n    </Grid>\n    )\n  }\n\n  render() {\n\n    // Due to the lack of a Redux store, function to set states have to be passed around.\n    // TODO Pass SelectedLogEntry to LogAssignmentManagement\n    return (\n      <section className=\"PracticeLog\">\n        <AssignmentChecklistPopover\n          focusedLogEntry={this.state.focusedLogEntry}\n          popoverAnchor={this.state.popoverAnchor}\n          handleClearPopoverAnchorEl={this.handleClearPopoverAnchorEl}\n          handleHTTPUpdateLogAssignments={this.handleHTTPUpdateLogAssignments} />\n        <LogTable\n          scrollToBottom={this.scrollToBottom}\n          logEntries={this.state.logEntries}\n          handleFocusLogEntryAndAnchorEl={this.handleFocusLogEntryAndAnchorEl}\n          handleSelectLogEntry={this.handleSelectLogEntry}\n          handleHTTPDeleteLogEntry={this.handleHTTPDeleteLogEntry} />\n        {this.PaginationControlPanel}\n        <LogEntryManagement\n          logLabels={this.state.logLabels}\n          selectedLogEntry={this.state.selectedLogEntry}\n          handleDeselectLogEntry={this.handleDeselectLogEntry}\n          handleHTTPUpdateLogEntry={this.handleHTTPUpdateLogEntry}\n          handleHTTPCreateLogEntry={this.handleHTTPCreateLogEntry} />\n        <LogLabelManagement\n          logLabels={this.state.logLabels}\n          handleHTTPCreateLogLabel={this.handleHTTPCreateLogLabel}\n          handleHTTPUpdateLogLabel={this.handleHTTPUpdateLogLabel}\n          handleHTTPDeleteLogLabel={this.handleHTTPDeleteLogLabel} />\n        <div ref={pageAnchor => { this.pageAnchor = pageAnchor; }} />\n        <DurationViewer\n          fetchLogLabelDuration={this.fetchLogLabelDuration}\n          logLabels={this.state.logLabels}\n          logLabelDurations={this.state.logLabelDurations} />\n        <Snackbar\n          open={this.state.alertShown}\n          autoHideDuration={6000}\n          onClose={this.handleCloseAlert}>\n          <Alert\n            onClose={this.handleCloseAlert}\n            severity={this.state.alertSeverity}>\n            {this.state.alertMessage}\n          </Alert>\n        </Snackbar>\n      </section>\n    )\n  }\n}\n\nfunction Alert(props: AlertProps) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}","import { Typography } from '@material-ui/core';\nimport React from 'react';\nimport { GoogleUserProfile } from '../shared/type_definitions'\nimport './Unauthorized.scss'\n\ntype Props = {\n  userProfile: GoogleUserProfile\n}\n\nfunction Unauthorized(props: Props) {\n  return <div className=\"Unauthorized\">\n      <Typography>\n        Hi {props.userProfile.full_name}, you are not allowed to access this application\n      </Typography>\n    </div>\n}\n\nexport default Unauthorized;\n","import React from 'react';\nimport {\n  GoogleLogin,\n  GoogleLoginResponse,\n  GoogleLoginResponseOffline,\n} from 'react-google-login';\n\nimport { GoogleUserProfile, GoogleError } from '../shared/type_definitions'\nimport PracticeLog from './PracticeLog'\nimport Unauthorized from './Unauthorized'\nimport './App.scss'\n\n/**\n  Token has scope [email, profile, openid, userinfo.profile, userinfo.email]\n */\n\n// TODO: Store the ID token in cache.\n// TODO: Check cached token expiration on every component load.\n\nfunction App() {\n  const [userProfile, setUserProfile] = React.useState<GoogleUserProfile | null>(null);\n\n  const handleLoginSuccess = (resp: GoogleLoginResponse | GoogleLoginResponseOffline) => {\n    if ((resp as GoogleLoginResponseOffline).code) {\n      resp = resp as GoogleLoginResponseOffline\n    } else {\n      resp = resp as GoogleLoginResponse\n      setUserProfile({\n        token_id: resp.tokenId,\n        access_token: resp.accessToken,\n        granted_scopes: resp.getGrantedScopes(),\n        google_user_id: resp.getBasicProfile().getId(),\n        google_email: resp.getBasicProfile().getEmail(),\n        full_name: resp.getBasicProfile().getName(),\n        given_name: resp.getBasicProfile().getGivenName(),\n        family_name: resp.getBasicProfile().getFamilyName(),\n        image_url: resp.getBasicProfile().getImageUrl()\n      })\n    }\n  }\n\n  const handleLoginFailure = (resp: GoogleError) => {\n    console.log('Google login failed', resp.error, resp.details)\n  }\n\n  if (userProfile !== null) {\n    if (userProfile.google_email === \"calvin.j.feng@gmail.com\") {\n      return (\n        <div className=\"App\">\n          <PracticeLog IDToken={userProfile.token_id} />\n        </div>\n      )\n    }\n    return (\n      <div className=\"App\">\n        <Unauthorized userProfile={userProfile} />\n      </div>\n    )\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    return (\n      <div className=\"App\">\n        <PracticeLog IDToken={\"anything\"} />\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <section style={{\"margin\": \"1rem\"}}>\n        <GoogleLogin\n          clientId={process.env.REACT_APP_OAUTH_CLIENT_ID as string}\n          buttonText={\"Login with Google\"}\n          onSuccess={handleLoginSuccess}\n          onFailure={handleLoginFailure} />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport reportWebVitals from './reportWebVitals';\nimport App from './containers/App';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}